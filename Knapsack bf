import java.io.*;
import java.util.*;

/**
*Solve the knapsack problem using brute force
*
* Input Format
* The first line will be the number of items. The second line will be the total permissable weight. The third line will be the list of weights. The fourth line will be the list of values.
*
* Constraints
* Total items will be 20 or less. Weights and values will be less than 10^8.
*
* Output Format
* Output a single number which is the total value of the best combination of items with weight less than the total weight.
*
* @author Briona
*/


public class Knapsack {
    private static int n; //number of items
    private static long capacity; 
    private long[] weights;
    private long[] vals;
    
    
   public void readFile(){
       Scanner scr= new Scanner(System.in);
       n= scr.nextInt();
       capacity= scr.nextLong();
       weights= new long[n];
       vals= new long [n];
       
       for(int i=0; i<n; i++){
          weights[i]= scr.nextLong();
       }
       for(int j=0; j<n; j++){
          vals[j]= scr.nextLong();
       }
       scr.close();
   }
    
    
    public long knapsack(int itemsLeft, long capacityLeft){
        if(itemsLeft<0){
            return 0;
        }
        else if(capacityLeft-weights[itemsLeft]<=0) {
            return 0;
        }else{
            
            long leaveVal= knapsack(itemsLeft-1, capacityLeft);
            long takeVal= vals[itemsLeft] + knapsack(itemsLeft-1, capacityLeft- weights[itemsLeft]);
            return Math.max(takeVal, leaveVal);   
        }
    }
    
    
     
    
    public static void main(String[] args) {
    
       Knapsack s= new Knapsack();
        s.readFile();
        System.out.print(s.knapsack(n-1, capacity));
    }
}
